/**********************************************************************************************************************
 * \file Cpu0_Main.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxCpu.h"
#include "IfxScuWdt.h"

#include "IfxPort.h"
#include "IfxPort_PinMap.h"

#include "IfxStm.h"
#include "IfxCpu_Irq.h"

typedef struct
{
    Ifx_STM             *stmSfr;            /**< \brief Pointer to Stm register base */
    IfxStm_CompareConfig stmConfig;         /**< \brief Stm Configuration structure */
    volatile uint8       LedBlink;          /**< \brief LED state variable */
    volatile uint32      counter;           /**< \brief interrupt counter */
} App_Stm;
typedef enum {
    RED_LIGHT = 0,
    BLUE_LIGHT = 1,
    BLINK_LIGHT = 2
}Blinker_State;
typedef enum{
    OFF = 0,
    ON = 1
}Switch_State;

App_Stm g_Stm;

IfxCpu_syncEvent g_cpuSyncEvent = 0;

void IfxStm0Demo_init(void);
void IfxSCU_SRC_init(void);

int core0_main(void)
{
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);

//    IfxStm0Demo_init();
    IfxSCU_SRC_init();

    /* Digital Input */
    IfxPort_setPinModeInput(IfxPort_P02_1.port, IfxPort_P02_1.pinIndex,IfxPort_InputMode_pullDown);

    /*P00_5    Digital Output*/
    IfxPort_setPinModeOutput(IfxPort_P10_2.port, IfxPort_P10_2.pinIndex, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinLow(IfxPort_P10_2.port, IfxPort_P10_2.pinIndex);
//
    IfxPort_setPinModeOutput(IfxPort_P10_1.port, IfxPort_P10_1.pinIndex, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinHigh(IfxPort_P10_1.port, IfxPort_P10_1.pinIndex);
    while(1)
    {

    }
    return (1);
}

IFX_INTERRUPT(STM_Int0Handler, 0, 100);
IFX_INTERRUPT(IR_Int0Handler, 0, 0x10);

void STM_Int0Handler(void)
{
    static Blinker_State state;
    static int flag = 0;
    static int cnt = 0;
    IfxStm_clearCompareFlag(g_Stm.stmSfr, g_Stm.stmConfig.comparator);

    switch(state){
        case RED_LIGHT:
            IfxStm_increaseCompare(g_Stm.stmSfr, g_Stm.stmConfig.comparator, 500000000u);
            IfxPort_setPinHigh(IfxPort_P10_1.port, IfxPort_P10_1.pinIndex);
            IfxPort_setPinLow(IfxPort_P10_2.port, IfxPort_P10_2.pinIndex);
            state = BLUE_LIGHT;
            break;
        case BLUE_LIGHT:
            IfxStm_increaseCompare(g_Stm.stmSfr, g_Stm.stmConfig.comparator, 500000000u);
            IfxPort_setPinHigh(IfxPort_P10_2.port, IfxPort_P10_2.pinIndex);
            IfxPort_setPinLow(IfxPort_P10_1.port, IfxPort_P10_1.pinIndex);
            state = BLINK_LIGHT;
            break;
        case BLINK_LIGHT:
            IfxStm_increaseCompare(g_Stm.stmSfr, g_Stm.stmConfig.comparator, 50000000u);
            IfxPort_togglePin(IfxPort_P10_2.port,IfxPort_P10_2.pinIndex);
            if((cnt=++cnt%10)) state = BLINK_LIGHT;
            else state = RED_LIGHT;
            break;
        default: break;
    }
    IfxCpu_enableInterrupts();
}
int snapshotTime=0;
void IR_Int0Handler(void)
{
    static Blinker_State state;
    static Switch_State btn;
    switch(state){
        case RED_LIGHT:
            switch(btn){
                case ON:
                case OFF;
                default: break;
            }
        case BLUE_LIGHT:
        case BLINK_LIGHT: break;
        default: break;
    }
}
void IfxStm0Demo_init(void)
{
    static Blinker_State state = RED_LIGHT;
    /* disable interrupts */
    boolean interruptState = IfxCpu_disableInterrupts();

    IfxStm_enableOcdsSuspend(&MODULE_STM0);

    g_Stm.stmSfr = &MODULE_STM0;
    IfxStm_initCompareConfig(&g_Stm.stmConfig);

    g_Stm.stmConfig.triggerPriority = 100u;
    g_Stm.stmConfig.typeOfService   = IfxSrc_Tos_cpu0;
    g_Stm.stmConfig.ticks           = 500000000;

    IfxStm_initCompare(g_Stm.stmSfr, &g_Stm.stmConfig);

    /* enable interrupts again */
    IfxCpu_restoreInterrupts(interruptState);
}
void IfxSCU_SRC_init(void){
    static Switch_State btn = OFF;
    SCU_EICR1.U &= ~(0x7 << 4);
    SCU_EICR1.U |= (0x1 << 4);

    SCU_EICR1.U |= (0x1 << 11);
    SCU_EICR1.U |= (0x1 << 8);

    SCU_EICR1.U &= ~(0x7 << 12);

    SCU_IGCR0.U &= ~(0x3 <<14);
    SCU_IGCR0.U |= (0x1 <<14);

    SRC_SCU_SCU_ERU0.U &= ~0xFF;
    SRC_SCU_SCU_ERU0.U |= 0x10;
    SRC_SCU_SCU_ERU0.U |= (0x1 << 10);
    SRC_SCU_SCU_ERU0.U &= ~(0x3 << 11);
}
