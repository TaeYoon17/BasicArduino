/**********************************************************************************************************************
 * \file Cpu0_Main.c
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxCpu.h"
#include "IfxScuWdt.h"

#include "IfxPort.h"
#include "IfxPort_PinMap.h"

#include "IfxStm.h"
#include "IfxCpu_Irq.h"

#include "ERU_Switch.h"


#define SCLK IfxPort_P00_0
#define RCLK IfxPort_P00_1
#define DIO IfxPort_P00_2

#define SWITCH1 IfxPort_P02_0
#define SWITCH2 IfxPort_P02_1

typedef enum{ Stop = 0, Rising = 1 } StopWatchState;
typedef struct{
    Ifx_STM             *stmSfr;            /**< \brief Pointer to Stm register base */
    IfxStm_CompareConfig stmConfig;         /**< \brief Stm Configuration structure */
    volatile uint8       LedBlink;          /**< \brief LED state variable */
    volatile uint32      counter;           /**< \brief interrupt counter */
}App_Stm;

void initGPIO(void);
void initSTM(void);

void send(unsigned char X);
void sendPort(unsigned char data,unsigned char port);

IfxCpu_syncEvent g_cpuSyncEvent = 0;

unsigned char Led_0f[10] = { 0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};

App_Stm g_Stm;
StopWatchState stopwatchstate = Stop;

volatile unsigned int cnt = 0;
IFX_INTERRUPT(STM_Int0Handler, 0, 100);
void STM_Int0Handler(void){
    static int flag = 0;
    IfxStm_clearCompareFlag(g_Stm.stmSfr, g_Stm.stmConfig.comparator);
    switch (stopwatchstate){
        case Stop:
            IfxStm_increaseCompare(g_Stm.stmSfr, g_Stm.stmConfig.comparator, 1000000u);
            break;
        case Rising:
            IfxStm_increaseCompare(g_Stm.stmSfr, g_Stm.stmConfig.comparator, 100000000u);
            cnt = (cnt+1) % 9999;
            break;
        default: break;
    }
    IfxPort_togglePin(IfxPort_P10_2.port, IfxPort_P10_2.pinIndex);
    IfxCpu_enableInterrupts();
}

IFX_INTERRUPT(ERU_Int0Handler,0, 0x10);
void ERU_Int0Handler(void){
    switch (stopwatchstate){
        case Stop:
            stopwatchstate = Rising;
            break;
        case Rising:
            stopwatchstate = Stop;
            break;
        default: break;
    }
}

IFX_INTERRUPT(ERU_Int1Handler,0,0x11);
void ERU_Int1Handler(void){
    cnt = 0;
    IfxPort_setPinHigh(IfxPort_P10_1.port, IfxPort_P10_1.pinIndex);
}

volatile void showPort(volatile int c){
    int i = 0;
    while(c!=0){
        sendPort(Led_0f[c % 10],(1<<i++));
        c/=10;
    }
    while(i<4) sendPort(Led_0f[0],(1<<i++));
}

void core0_main(void)
{
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);

    initGPIO();

    init_switch1(0x10);
    init_switch2(0x11);

    initSTM();
    while(1)
    {
        showPort(cnt);
//        for(int i = 0; i<4; i++) sendPort(Led_0f[4-i],(1<<i));
    }
}
void initGPIO(void){
    IfxPort_setPinModeOutput(SCLK.port, SCLK.pinIndex, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(RCLK.port, RCLK.pinIndex, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(DIO.port, DIO.pinIndex, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);

    IfxPort_setPinModeInput(SWITCH1.port, SWITCH1.pinIndex, IfxPort_Mode_inputPullDown);
    IfxPort_setPinModeInput(SWITCH2.port, SWITCH2.pinIndex, IfxPort_Mode_inputPullDown);

    IfxPort_setPinModeOutput(IfxPort_P10_2.port,IfxPort_P10_2.pinIndex, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinModeOutput(IfxPort_P10_1.port,IfxPort_P10_1.pinIndex, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
    IfxPort_setPinHigh(IfxPort_P10_2.port, IfxPort_P10_2.pinIndex);

}
//void initERU(void){
//    SCU_EICR1.U &= ~(0x7 << 4);
//    SCU_EICR1.U |= (0x1 << 4);
//
//    SCU_EICR1.U |= (0x1 << 11);
//    SCU_EICR1.U |= (0x1 << 8);
//
//    SCU_EICR1.U &= ~(0x7 << 12);
//
//    SCU_IGCR0.U &= ~(0x3 <<14);
//    SCU_IGCR0.U |= (0x1 <<14);
//
//    SRC_SCU_SCU_ERU0.U &= ~0xFF;
//    SRC_SCU_SCU_ERU0.U |= 0x10;
//    SRC_SCU_SCU_ERU0.U |= (0x1 << 10);
//    SRC_SCU_SCU_ERU0.U &= ~(0x3 << 11);
//}
void initSTM(void){
    stopwatchstate = Rising;
    boolean interruptState = IfxCpu_disableInterrupts();

    IfxStm_enableOcdsSuspend(&MODULE_STM0);

    g_Stm.stmSfr = &MODULE_STM0;
    IfxStm_initCompareConfig(&g_Stm.stmConfig);

    g_Stm.stmConfig.triggerPriority = 100u;
    g_Stm.stmConfig.typeOfService   = IfxSrc_Tos_cpu0;
    g_Stm.stmConfig.ticks           = 100000000u;

    IfxStm_initCompare(g_Stm.stmSfr, &g_Stm.stmConfig);

    /* enable interrupts again */
    IfxCpu_restoreInterrupts(interruptState);
}

void send(unsigned char X){
    for(int i = 8; i>=1; i--){
        X & 0x80 ? IfxPort_setPinHigh(DIO.port, DIO.pinIndex) : IfxPort_setPinLow(DIO.port, DIO.pinIndex);
        X <<= 1;
        IfxPort_setPinLow(SCLK.port, SCLK.pinIndex);
        IfxPort_setPinHigh(SCLK.port, SCLK.pinIndex);
    }
}

void sendPort(unsigned char data,unsigned char port){
    send(data);
    send(port);
    IfxPort_setPinLow(RCLK.port, RCLK.pinIndex);
    IfxPort_setPinHigh(RCLK.port, RCLK.pinIndex);
}
/*
void initERU(void){
    // 아두이노 핀이 어디 포트인지 찾고 포트가 ERU 몇번 위치인지 찾기
    IfxSrc_init(&MODULE_SRC.STM.STM[0].SR0, IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
    IfxScuEru_initReqPin(IfxScu_REQ6_P02_0_IN, IfxPort_InputMode_pullDown); // IN21 - ERS2
    IfxScuEru_initReqPin(IfxScu_REQ14_P02_1_IN, IfxPort_InputMode_pullDown); // IN32 - ERS3
    // 아래 작업을 수행하는 입력
//    IfxPort_setPinModeInput(req->pin.port, req->pin.pinIndex, inputMode);
//    IfxScuEru_selectExternalInput((IfxScuEru_InputChannel)req->channelId, (IfxScuEru_ExternalInputSelection)req->select);
    IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel_2);
    IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel_3);

    IfxScuEru_connectTrigger(IfxScuEru_InputChannel_2,IfxScuEru_InputNodePointer_0); // ERS2 to OGU0
    IfxScuEru_connectTrigger(IfxScuEru_InputChannel_3,IfxScuEru_InputNodePointer_1); // ERS3 to OGU1

    IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel_0, IfxScuEru_InterruptGatingPattern_alwaysActive);
    IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel_1, IfxScuEru_InterruptGatingPattern_alwaysActive);

//    IfxStm_CompareConfig
    IfxSrc_init(, IfxSrc_Tos_cpu0, 0x10);
    IfxSrc_enable(SRC_SCU_SCU_ERU0);
}
 */
